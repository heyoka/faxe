# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

variables:
- group: 'azure_faxe' # variable group

pool: azure-faxe-cluster

steps:
- task: CopyFiles@2
  inputs:
    Contents: |
      **/*
      !todo
      !statefulset.yml
      !README.md
      !docker.run
      !Dockerfile_azedge
      !azure-pipelines.yml
      !azure-pipelines-devat.yml
      !azure-pipelines-azure.yml
      !azure-pipelines-helix.yml
      !docker-compose.yaml
      !Dockerfile_debian.intel-nuc
      !Dockerfile.intel-nuc
      !Dockerfile.k8s
      !Dockerfile_faxe
      !Dockerfile.revpi-core-3
      !docker-compose-devat.yml
      !docker-compose-helix.yml
      !.git
      !.github
      !.gitignore
    TargetFolder: '/opt/tgw/faxe_repo'
    CleanTargetFolder: true
    overWrite: true
- script: | 
    cd /opt/tgw/faxe_repo
    # gather azure build information:
    echo '$(Build.Repository.Name).$(Build.BuildNumber)'
    TAG=$(echo '$(Build.Repository.Name):$(Build.BuildNumber)')
    echo "creating env file"
    echo "FAXE_FLOW_AUTO_START=$FAXE_FLOW_AUTO_START" > /opt/tgw/docker_storage/azure.env
    echo "FAXE_HTTP_API_PORT=$FAXE_HTTP_API_PORT" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_MNESIA_DIR=$FAXE_MNESIA_DIR" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_QUEUE_BASE_DIR=$FAXE_QUEUE_BASE_DIR" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_PYTHON_SCRIPT_PATH=$FAXE_PYTHON_SCRIPT_PATH" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_MQTT_HOST=$FAXE_MQTT_HOST" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_ALLOW_ANONYMOUS=$FAXE_ALLOW_ANONYMOUS" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_AMQP_HOST=$FAXE_AMQP_HOST" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_AMQP_PORT=$FAXE_AMQP_PORT" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_AMQP_USER=$(FAXE_AMQP_USER)" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_AMQP_PASS=$(FAXE_AMQP_PASS)" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_CRATE_HOST=$FAXE_CRATE_HOST" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_CRATE_HTTP_HOST=$FAXE_CRATE_HTTP_HOST" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_CRATE_HTTP_PORT=$FAXE_CRATE_HTTP_PORT" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_CRATE_HTTP_USER=$(FAXE_CRATE_HTTP_USER)" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_CRATE_USER=$(FAXE_CRATE_USER)" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_CRATE_PASS=$(FAXE_CRATE_PASS)" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_CRATE_HTTP_PASS=$(FAXE_CRATE_HTTP_PASS)" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_HTTP_API_SSL_KEYFILE=$FAXE_HTTP_API_SSL_KEYFILE" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_HTTP_API_SSL_CERTFILE=$FAXE_HTTP_API_SSL_CERTFILE" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_HTTP_API_SSL_CACERTFILE=$FAXE_HTTP_API_SSL_CACERTFILE" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_HTTP_API_TLS_ENABLE=$FAXE_HTTP_API_TLS_ENABLE" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_EMAIL_FROM=$FAXE_EMAIL_FROM" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_EMAIL_PORT=$FAXE_EMAIL_PORT" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_EMAIL_TLS=$FAXE_EMAIL_TLS" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_EMAIL_USER=$(FAXE_EMAIL_USER)" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_EMAIL_TEMPLATE=$FAXE_EMAIL_TEMPLATE" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_EMAIL_PASS=$(FAXE_EMAIL_PASS)" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_CONN_STATUS_HANDLER_MQTT_ENABLE=$FAXE_CONN_STATUS_HANDLER_MQTT_ENABLE" >> /opt/tgw/docker_storage/azure.env
    echo "FAXE_HTTP_API_CIPHERS=$FAXE_HTTP_API_CIPHERS" >> /opt/tgw/docker_storage/azure.env
    #build container-image
    sudo -u $(FAXE_RUNTIME_USER) docker build -t $(Build.Repository.Name):$(Build.BuildNumber) -f Dockerfile_debian .
    # inject current build number into compose-file
    sed "s!Dockerfile_debian!$TAG!g" -i docker-compose-azure.yml
  displayName: 'build new image and tag it with azure pipeline build number'
- script: |     
    # stop old version
    cd /opt/tgw/faxe_repo
    sudo -u $(FAXE_RUNTIME_USER) /usr/local/bin/docker-compose -f docker-compose-azure.yml down
    # kill/remove old data
    if [[ $(sudo -u $(FAXE_RUNTIME_USER) docker ps -a | grep faxe ) ]]; 
      then
        sudo -u $(FAXE_RUNTIME_USER) /usr/bin/docker kill faxe; 
        sudo -u $(FAXE_RUNTIME_USER) /usr/bin/docker container rm faxe;
        #sudo -u $(FAXE_RUNTIME_USER) /usr/bin/docker rmi faxe_repo_faxe;
        echo "running faxe found - kill+remove it"
      else
        echo "no running faxe found - skip"
    fi
  displayName: 'stop old container via docker-compose'    
- script: |     
    cd /opt/tgw/faxe_repo
    sudo -u $(FAXE_RUNTIME_USER) /usr/local/bin/docker-compose -f docker-compose-azure.yml up -d
  displayName: 'start container via docker-compose'

- script: |
    #check if we start householding
    HOUSEKEEPING=false
    IMAGE_KEEP=5
    if [ $(docker images | grep faxe | wc -l) -gt $IMAGE_KEEP ]
      then
    	  echo "too many images for faxe present - starting housekeeping"
    	  HOUSEKEEPING=true
      else
    	  echo "skipping housekeeping"
    	  HOUSEKEEPING=false
        echo $(( $(echo $(docker images | grep faxe | wc -l)) - $IMAGE_KEEP )) images left, before housekeeping deletes old images
    fi
    # clear arrays:
    unset arr_all  arr_keep
    if [ $HOUSEKEEPING = "true" ];
      then
      	echo "starting housekeeping"
    	  arr_all=$(docker images | grep faxe | sort -k2 -r | awk '{print $3}')
    	  #echo all ${arr_all[*]}
    	  arr_keep=$(docker images | grep faxe | sort -k2 -r | awk '{print $3}' | head -n $IMAGE_KEEP)
    	  #echo keep ${arr_keep[*]}
    	  for del in ${arr_keep[@]}
    	  do
    	    arr_all=("${arr_all[@]/$del}") 
    	  done   
    fi  
    echo delete images: ${arr_all[*]}
    echo keep images: ${arr_keep[*]}
    # delete old images:
    sudo -u $(FAXE_RUNTIME_USER) /usr/bin/docker rmi ${arr_all[*]}
  displayName: 'housekeeping - keep only latest 5 images'    