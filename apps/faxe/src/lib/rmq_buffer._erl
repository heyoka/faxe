%% Date: 14.03.16 - 15:46
%% â’¸ 2016 LineMetrics GmbH

-module(rmq_buffer).
-author("Alexander Minichmair").

-behaviour(gen_server).

-include("../include/api.hrl").

%% API
-export([start_link/0]).

%% gen_server callbacks
-export([init/1,
   handle_call/3,
   handle_cast/2,
   handle_info/2,
   terminate/2,
   code_change/3]).


-define(MAX_RETRIES, 2).

%% time to wait, when all msgs have been 'sent' and there are still unacked messages in the list
-define(PENDING_TIMEOUT, 20000).

-record(state, {pending_item, pending_timeout, bunny}).

-define(BUNNY, {hosts, [ {"192.168.9.125",5672}, {"192.168.9.125",5672} ]},
   {user, "linemetrics"},
   {pass, "line7metrics"},
   {vhost, "/"},
   {confirm_timeout, 5000},
   {reconnect_timeout, 8000},
   {delivery_mode, 1},
   {heartbeat, 20},
   {ssl_options, none}).

%%%===================================================================
%%% API
%%%===================================================================

%%--------------------------------------------------------------------
%% @doc
%% Starts the server
%%
%% @end
%%--------------------------------------------------------------------
-spec(start_link() ->
   {ok, Pid :: pid()} | ignore | {error, Reason :: term()}).
start_link() ->
   gen_server:start_link(?MODULE, [], []).

%%%===================================================================
%%% gen_server callbacks
%%%===================================================================

%%--------------------------------------------------------------------
%% @private
%% @doc
%% Initializes the server
%%
%% @spec init(list()) -> {ok, State} |
%%                     {ok, State, Timeout} |
%%                     ignore |
%%                     {stop, Reason}
%% @end
%%--------------------------------------------------------------------
-spec(init(Args::list()) ->
   {ok, State :: #state{}} | {ok, State :: #state{}, timeout() | hibernate} |
   {stop, Reason :: term()} | ignore).
init([]) ->
   erlang:send_after(0, self(), send),
   BunnyArgs = application:get_env('LM_Api', rmq_pool),
   {ok, Bunny} = bunny_worker:start_link(BunnyArgs),
   {ok, #state{bunny = Bunny}}.
%%--------------------------------------------------------------------
%% @private
%% @doc
%% Handling call messages
%%
%% @end
%%--------------------------------------------------------------------
-spec(handle_call(Request :: term(), From :: {pid(), Tag :: term()},
    State :: #state{}) ->
   {reply, Reply :: term(), NewState :: #state{}} |
   {reply, Reply :: term(), NewState :: #state{}, timeout() | hibernate} |
   {noreply, NewState :: #state{}} |
   {noreply, NewState :: #state{}, timeout() | hibernate} |
   {stop, Reason :: term(), Reply :: term(), NewState :: #state{}} |
   {stop, Reason :: term(), NewState :: #state{}}).
handle_call(_Request, _From, State) ->
   {reply, ok, State}.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% Handling cast messages
%%
%% @end
%%--------------------------------------------------------------------
-spec(handle_cast(Request :: term(), State :: #state{}) ->
   {noreply, NewState :: #state{}} |
   {noreply, NewState :: #state{}, timeout() | hibernate} |
   {stop, Reason :: term(), NewState :: #state{}}).
handle_cast(_Request, State) ->
   {noreply, State}.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% Handling all non call/cast messages
%%
%% @spec handle_info(Info, State) -> {noreply, State} |
%%                                   {noreply, State, Timeout} |
%%                                   {stop, Reason, State}
%% @end
%%--------------------------------------------------------------------
-spec(handle_info(Info :: timeout() | term(), State :: #state{}) ->
   {noreply, NewState :: #state{}} |
   {noreply, NewState :: #state{}, timeout() | hibernate} |
   {stop, Reason :: term(), NewState :: #state{}}).
handle_info(send, State=#state{bunny = Bunny}) ->
   NewState =
   case ets:first(?MODULE) of
      '$end_of_table' ->   erlang:send_after(300, self(), send),
                           State;

      Key -> case ets:lookup(?MODULE, Key) of
                [] -> ok;
                [Entry] ->
                   case send_item(Entry, Bunny) of
                      {ok, SeqNo}    ->   {ok, SeqNo},
                                          erlang:send_after(?PENDING_TIMEOUT, self(), pending_timeout),
                                          State#state{pending_item = SeqNo};
                      Error -> lager:warning("Could not deliver item, Last Error was: ~p",[Error]),
                                 erlang:send_after(100, self(), send),
                                 State
                   end
             end
   end,
   {noreply, NewState};

handle_info({publisher_ack, DTag}, State=#state{pending_item = DTag}) ->
%%   lager:notice("lease released, when all items where sent :: ~p~n", [DTag]),
   catch erlang:cancel_timer(State#state.pending_timeout),
   ets:delete(?MODULE, ets:first(?MODULE)),

   erlang:send_after(0, self(), send),

   {noreply, State#state{pending_item = undefined, pending_timeout = undefined}}
;

handle_info({publisher_ack, _DTag}, State=#state{}) ->
   lager:warning("~p got unexpected DTag acknowledged :~p",[?MODULE, _DTag]),
   {noreply, State}
;

handle_info(pending_timeout, #state{}=State) ->
   lager:warning("~p has pending timeout !",[?MODULE]),
   {noreply, State}
;

handle_info(_Info, State) ->
   lager:warning("~p got unknown message :: ~n~p~n", [?MODULE, _Info]),
   {noreply, State}.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% This function is called by a gen_server when it is about to
%% terminate. It should be the opposite of Module:init/1 and do any
%% necessary cleaning up. When it returns, the gen_server terminates
%% with Reason. The return value is ignored.
%%
%% @spec terminate(Reason, State) -> void()
%% @end
%%--------------------------------------------------------------------
-spec(terminate(Reason :: (normal | shutdown | {shutdown, term()} | term()),
    State :: #state{}) -> term()).
terminate(_Reason, _State) ->
   ok.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% Convert process state when code is changed
%%
%% @spec code_change(OldVsn, State, Extra) -> {ok, NewState}
%% @end
%%--------------------------------------------------------------------
-spec(code_change(OldVsn :: term() | {down, term()}, State :: #state{},
    Extra :: term()) ->
   {ok, NewState :: #state{}} | {error, Reason :: term()}).
code_change(_OldVsn, State, _Extra) ->
   {ok, State}.

%%%===================================================================
%%% Internal functions
%%%===================================================================
send_item(ItemStruct, Bunny) ->
%%   lager:notice("send item to RMQ: ~p",[ItemStruct]),
   send(ItemStruct, Bunny, ?MAX_RETRIES, not_sent).

send(_Item, _Bunny , 0, LastError) ->
   LastError;
send(Item, Bunny, Retries, _LastError) ->
   M = rabbitmq:prepare_rmq_msg(Item),
   case gen_server:call(Bunny, M) of
      {ok, SeqNo}    -> {ok, SeqNo};
      Error -> send(Item, Bunny, Retries-1, Error)
   end.