%% Copyright LineMetrics 2015
%% converts #data_item to mq - json - message
%%
-module(rabbitmq).
-author("Alexander Minichmair").

-include("../include/api.hrl").
%% API
-export([send/1, send/3, routing_key/2, dataitem_to_struct/1,
   struct_filter/3, send_message/3, headers/4, prepare_rmq_msg/1]).


%%%%%%%%%%%%%%%%%%%%%%%%%% API %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

send(ItemStruct, AccountId, DeviceId) ->
   SId = struct:get_value(<<"sid">>, ItemStruct),
   EventType = struct:get_value(<<"ty">>, ItemStruct),
   send_message(
      ItemStruct,
      routing_key(EventType, SId),
      headers(SId, EventType, AccountId, DeviceId))
.


-spec send(#data_item{}) -> term().
send(#data_item{stream_id = undefined, stream_type = _SType} = _DataItem) ->
   ok;
%%    erlang:error("undefined stream-id in rabbitmq:send function!");
send(#data_item{input = _InputId, stream_id = SId, stream_type = SType}=DataItem) ->
   send_message(
            dataitem_to_struct(DataItem),
            routing_key(SType, SId),
            headers(SId, SType, DataItem#data_item.account_id, DataItem#data_item.device_id))
.


prepare_rmq_msg(Struct) when is_tuple(Struct)->
   Sid = struct:get_value(<<"sid">>, Struct),
   Ty = struct:get_value(<<"ty">>, Struct),
   {deliver,
      {
         ?RABBITMQ_EXCHANGE,
         routing_key(Sid, Ty),
         list_to_binary(mochijson2:encode(Struct)),
         headers(Sid, Ty, struct:get_value(<<"aid">>, Struct), struct:get_value(<<"did">>, Struct)),
         self()
      }
   }.

send_message(MessageStruct, RoutingKey, Headers) ->
   Msg = list_to_binary(mochijson2:encode(MessageStruct)),
   Res =
   try_send(
      {?RABBITMQ_EXCHANGE,
      RoutingKey,
      Msg,
      Headers},
      1, 2, not_sent),
   Res.

headers(StreamId, EventType, AccountId, DeviceId) ->
 [
    {<<"sid">>, longstr, StreamId}, {<<"ty">>, longstr, EventType},
    {<<"did">>, longstr, DeviceId}, {<<"aid">>, longstr, AccountId},
    {<<"s">>, longstr, <<"api">>}
 ].

routing_key(StreamType, StreamId) when is_binary(StreamType) andalso is_binary(StreamId) ->
   <<StreamType/binary, <<".">>/binary, StreamId/binary>>.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% internal %%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

try_send(_R, MaxTries, MaxTries, Res) ->
   Res;
try_send(Req = {Ex, Key, Msg, Headers}, Tries, MaxTries, _Res) ->
   case bunny_worker:deliver(Ex, Key, Msg, Headers) of
      {ok, SeqNo}    -> {ok, SeqNo};
      Err   -> try_send(Req, Tries+1, MaxTries, Err)
   end.

dataitem_to_struct(
    #data_item{
          timestamp = Ts,
          stream_id = StreamId,
          stream_type = StreamType,
          timed_data_batch = TDB,
          value = Val,
          max = Max,
          min = Min,
          num_items = Num} = Item) ->

   case Ts < 1400000000000 of %% 13th of March, 2014 - [ 2014-05-13T16:53:20.000Z <utc> ]
      true -> lager:warning("OLD Timestamp found: ~p",[Ts]);
      false -> ok
   end,
%%   latency:calc(Ts, TDB),
   S0    = {struct,[]},
   S1    = struct_filter(<<"tdb">>, TDB, S0),
   S2    = struct_filter(<<"num">>, Num, S1),
   S4    = struct_filter(<<"max">>, Max, S2),
   S5    = struct_filter(<<"min">>, Min, S4),
   S71   = struct_filter(<<"val">>, Val, S5),
   S72   = eval_geocoord(Item, S71),
   S7    = struct_filter(<<"ts">>, Ts, S72),
   S8    = struct_filter(<<"ty">>, StreamType, S7),
   struct_filter(<<"sid">>, StreamId, S8).


struct_filter(_Key, undefined, Struct) ->
   Struct;
struct_filter(Key, Val, Struct) ->
   struct:set_value(Key, Val, Struct).

eval_geocoord(#data_item{lat=undefined, long=undefined}, Struct) ->
   Struct;
eval_geocoord(#data_item{lat = Lat, long = Long}, Struct) ->
   Geo0 = struct:set_value(<<"lat">>, Lat, Struct),
   Geo = struct:set_value(<<"long">>, Long, Geo0),
   Geo.