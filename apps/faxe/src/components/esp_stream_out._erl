%% Date: 05.01.17 - 10:21
%% â’¸ 2017 heyoka
-module(esp_stream_out).
-author("Alexander Minichmair").

-behaviour(df_component).

-include("faxe.hrl").
%% API
-export([init/3, process/3, handle_info/2, options/0]).

-record(state, {
   node_id           :: term()

}).

-define(RABBITMQ_EXCHANGE, <<"x_fanout_tgw_test">>).

options() -> [{stream_id, string},{fields, list,[]}, {tags, list,[]}].

init(NodeId, _Inputs, #{stream_id := StreamId, fields := Fields, tags := Tags}) ->
   io:format("~p init:node~n",[NodeId]),
   State = #state{node_id = NodeId},
   {ok, all, State}.

process(Inport, #data_batch{points = Points}, State=#state{}) ->
   batch(Inport, lists:reverse(Points), State);
process(_Inport, #data_point{} = Point, State=#state{}) ->
   %% maybe inject standard fields
   Msg0 = flowdata:set_field(Point, <<"ty">>, Ty),
   Msg1 = flowdata:set_field(Msg0, <<"sid">>, Sid),
   Msg = flowdata:stream_encode(Msg1),
   lager:notice("RabbitMQ Message written: ~p",[Msg]),
   bunny_worker:deliver(
      ?RABBITMQ_EXCHANGE,
      StreamId,
      Msg,
      [
         {<<"sid">>, longstr, Sid}, {<<"ty">>, longstr, Ty}
      ]
   ),
   {ok, State}.

handle_info({publisher_ack, _Ref}=Req, State) ->
   io:format("request: ~p <~p>~n", [Req, ?MODULE]),
   {ok, State};
handle_info(Request, State) ->
   io:format("Unknown info request: ~p ~p~n", [?MODULE, Request]),
   {ok, State}.


%%%%%%%%%%%%%%%%%%%%%%%
batch(_I, [], State) ->
   {ok, State};
batch(In, [Point| R] , State) ->
   {ok, NewState} = process(In, Point, State),
   batch(In, R, NewState).