def timeout = 0s
def condition_reason = 'timeout'

def in1 =
    |json_emitter()
    .every(12s)
    .jitter(2s)
    .json(<<<{"condition": {"state": "IDLE"}, "topic": "in1"} >>>)


def in2 =
    |json_emitter()
    .every(15s)
    .jitter(32s)
    .json(<<<{"Function": "interface::WInterface::progress", "topic": "in2"}>>>)

def in3 =
    |json_emitter()
    .every(4s)
    .jitter(13s)
    .json(<<<{"Function": "interface::WInterface::process", "topic": "in3"}>>>)


in1
|state_sequence(in2, in3)
.states(
    lambda: "data.topic" == 'in1', %% state 1
    lambda: "data.topic" == 'in2', %% state 2
    lambda: "data.topic" == 'in3'  %% state 3
)
.within(
    25s, %% time for state 2 to be fulfilled
    20s  %% time for state 3 to be fulfilled
    )
%.strict()

|debug('warning')


