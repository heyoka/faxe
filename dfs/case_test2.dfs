%% send alarm, if the the mean exceeds a certain threshold

def postfix = '---hehehe'

def point =
|json_emitter()
.every(1s)
.json(<<< {"condition": {"id": 0, "name": "OK"}, "condition_reason": "", "predicted_maintenance_time": 1584246411783,
        "vac_on_without_contact": [1.2, 2.5, 4.33], "vac_on_with_contact": [5.6, 45.98, 7.012]} >>>,
      <<< {"condition": {"id": 1, "name": "Warning"}, "condition_reason": "bad succer", "predicted_maintenance_time": 1583246411783,
         "vac_on_without_contact": [0.2, 2.5, 8.01], "vac_on_with_contact": [6.001, 4.798, 7.012]} >>>,
      <<< {"condition": {"id": 2, "name": "Error"}, "condition_reason": "something went really wrong!", "predicted_maintenance_time": 1582246411783,
         "vac_on_without_contact": [0.5, 2.5, 0.44], "vac_on_with_contact": [2.06, 4.98, 2.901]} >>>)


    |case(
        lambda: "data.condition.name" == 'OK',
        lambda: "data.condition.name" == 'Warning',
        lambda: "data.condition.name" == 'Error'
    )
    .values(
        <<<{"cond": "Everything OK!"}>>>,
        <<<{"cond": "Oh, oh, a Warning!"}>>>,
        <<<{"cond": "Damn, Error!"}>>>
        )
    .json()
    .as('data')
    .default(<<<{"cond": "Nothing matched!!!"}>>>)

    %|keep('data.condition.alt_name')

    |debug()