# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

variables:
- group: 'devat_faxe' # variable group

pool: devat-faxe-cluster

steps:
- script: | 
    cd /opt/faxe/faxe_repo
    # gather azure build information:
    echo '$(Build.Repository.Name).$(Build.BuildNumber)'
    TAG=$(echo '$(Build.Repository.Name):$(Build.BuildNumber)')
    echo "creating env file"
    #echo ---------
    #[ $(echo $(FAXE_CRATE_HTTP_USER) | wc --chars) == "0" ] || echo var set
    set -x
    echo $(FAXE_AMQP_USER)
    echo $FAXE_AMQP_USER | wc --chars user
    echo $(FAXE_AMQP_PASS) | wc --chars pass
    set +x
    #[ $(echo $(FAXE_AMQP_PASS) | wc == "0" ) == "0" ] || echo pass set
    #echo ---------
    [ ${#FAXE_FLOW_AUTO_START} == "0" ] || echo "FAXE_FLOW_AUTO_START=$FAXE_FLOW_AUTO_START" > /opt/faxe/docker_storage/devat.env2
    [ ${#FAXE_HTTP_API_PORT} == "0" ] || echo "FAXE_HTTP_API_PORT=$FAXE_HTTP_API_PORT" >> /opt/faxe/docker_storage/devat.env2
    [ ${#FAXE_MNESIA_DIR} == "0" ] || echo "FAXE_MNESIA_DIR=$FAXE_MNESIA_DIR" >> /opt/faxe/docker_storage/devat.env2
    [ ${#FAXE_QUEUE_BASE_DIR} == "0" ] || echo "FAXE_QUEUE_BASE_DIR=$FAXE_QUEUE_BASE_DIR" >> /opt/faxe/docker_storage/devat.env2
    [ ${#FAXE_PYTHON_SCRIPT_PATH} == "0" ] || echo "FAXE_PYTHON_SCRIPT_PATH=$FAXE_PYTHON_SCRIPT_PATH" >> /opt/faxe/docker_storage/devat.env2
    [ ${#FAXE_MQTT_HOST} == "0" ] || echo "FAXE_MQTT_HOST=$FAXE_MQTT_HOST" >> /opt/faxe/docker_storage/devat.env2
    [ ${#FAXE_ALLOW_ANONYMOUS} == "0" ] || echo "FAXE_ALLOW_ANONYMOUS=$FAXE_ALLOW_ANONYMOUS" >> /opt/faxe/docker_storage/devat.env2
    [ ${#FAXE_AMQP_HOST} == "0" ] || echo "FAXE_AMQP_HOST=$FAXE_AMQP_HOST" >> /opt/faxe/docker_storage/devat.env2
    [ ${#FAXE_AMQP_PORT} == "0" ] || echo "FAXE_AMQP_PORT=$FAXE_AMQP_PORT" >> /opt/faxe/docker_storage/devat.env2
    [ $(echo $(FAXE_AMQP_USER) | wc --chars) == "0" ] || echo "FAXE_AMQP_USER=$(FAXE_AMQP_USER)" >> /opt/faxe/docker_storage/devat.env2
    [ $(echo $(FAXE_AMQP_PASS) | wc --chars) == "0" ] || echo "FAXE_AMQP_PASS=$(FAXE_AMQP_PASS)" >> /opt/faxe/docker_storage/devat.env2
    [ ${#FAXE_CRATE_HOST} == "0" ] || echo "FAXE_CRATE_HOST=$FAXE_CRATE_HOST" >> /opt/faxe/docker_storage/devat.env2
    [ ${#FAXE_CRATE_HTTP_HOST} == "0" ] || echo "FAXE_CRATE_HTTP_HOST=$FAXE_CRATE_HTTP_HOST" >> /opt/faxe/docker_storage/devat.env2
    [ ${#FAXE_CRATE_HTTP_PORT} == "0" ] || echo "FAXE_CRATE_HTTP_PORT=$FAXE_CRATE_HTTP_PORT" >> /opt/faxe/docker_storage/devat.env2
    [ $(echo $(FAXE_CRATE_HTTP_USER) | wc --chars) == "0" ] ||echo "FAXE_CRATE_HTTP_USER=$(FAXE_CRATE_HTTP_USER)" >> /opt/faxe/docker_storage/devat.env2
    [ $(echo $(FAXE_CRATE_USER) | wc --chars) == "0" ] ||echo "FAXE_CRATE_USER=$(FAXE_CRATE_USER)" >> /opt/faxe/docker_storage/devat.env2
    [ $(echo $(FAXE_CRATE_PASS) | wc --chars) == "0" ] ||echo "FAXE_CRATE_PASS=$(FAXE_CRATE_PASS)" >> /opt/faxe/docker_storage/devat.env2
    [ $(echo $(FAXE_CRATE_HTTP_PASS) | wc --chars) == "0" ] ||echo "FAXE_CRATE_HTTP_PASS=$(FAXE_CRATE_HTTP_PASS)" >> /opt/faxe/docker_storage/devat.env2
    [ ${#FAXE_HTTP_API_SSL_KEYFILE} == "0" ] || echo "FAXE_HTTP_API_SSL_KEYFILE=$FAXE_HTTP_API_SSL_KEYFILE" >> /opt/faxe/docker_storage/devat.env2
    [ ${#FAXE_HTTP_API_SSL_CERTFILE} == "0" ] || echo "FAXE_HTTP_API_SSL_CERTFILE=$FAXE_HTTP_API_SSL_CERTFILE" >> /opt/faxe/docker_storage/devat.env2
    [ ${#FAXE_HTTP_API_SSL_CACERTFILE} == "0" ] || echo "FAXE_HTTP_API_SSL_CACERTFILE=$FAXE_HTTP_API_SSL_CACERTFILE" >> /opt/faxe/docker_storage/devat.env2
    [ ${#FAXE_HTTP_API_TLS_ENABLE} == "0" ] || echo "FAXE_HTTP_API_TLS_ENABLE=$FAXE_HTTP_API_TLS_ENABLE" >> /opt/faxe/docker_storage/devat.env
    [ ${#FAXE_EMAIL_FROM} == "0" ] || echo "FAXE_EMAIL_FROM=$FAXE_EMAIL_FROM" >> /opt/faxe/docker_storage/devat.env2
    [ ${#FAXE_EMAIL_PORT} == "0" ] || echo "FAXE_EMAIL_PORT=$FAXE_EMAIL_PORT" >> /opt/faxe/docker_storage/devat.env2
    [ ${#FAXE_EMAIL_TLS} == "0" ] || echo "FAXE_EMAIL_TLS=$FAXE_EMAIL_TLS" >> /opt/faxe/docker_storage/devat.env2
    [ $(echo $(FAXE_EMAIL_USER) | wc --chars) == "0" ] || echo "FAXE_EMAIL_USER=$(FAXE_EMAIL_USER)" >> /opt/faxe/docker_storage/devat.env2
    [ ${#FAXE_EMAIL_TEMPLATE} == "0" ] || echo "FAXE_EMAIL_TEMPLATE=$FAXE_EMAIL_TEMPLATE" >> /opt/faxe/docker_storage/devat.env2
    [ $(echo $(FAXE_EMAIL_PASS) | wc --chars) == "0" ] || echo "FAXE_EMAIL_PASS=$(FAXE_EMAIL_PASS)" >> /opt/faxe/docker_storage/devat.env2
    [ ${#FAXE_CONN_STATUS_HANDLER_MQTT_ENABLE} == "0" ] || echo "FAXE_CONN_STATUS_HANDLER_MQTT_ENABLE=$FAXE_CONN_STATUS_HANDLER_MQTT_ENABLE" >> /opt/faxe/docker_storage/devat.env2
    [ ${#FAXE_HTTP_API_CIPHERS} == "0" ] || echo "FAXE_HTTP_API_CIPHERS=$FAXE_HTTP_API_CIPHERS" >> /opt/faxe/docker_storage/devat.env2
    #build container-image
    #sudo -u $(FAXE_RUNTIME_USER) docker build -t $(Build.Repository.Name):$(Build.BuildNumber) -f Dockerfile_debian .
    # inject current build number into compose-file
    #sed "s!Dockerfile_debian!$TAG!g" -i docker-compose-devat.yml
    # change port binding dynamically to host, used for loadbalancing to prevent duplicate port binding
    #sed "sL8080:8080L$(hostname -i):8080:8080Lg" -i docker-compose-devat.yml
  displayName: 'build new image and tag it with azure pipeline build number'

  