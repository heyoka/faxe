# Start with a minimal pipeline that you can customize to build and deploy your code.

# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

variables:
- group: 'faxe_dev - Devcloud' # variable group
- name: environmentFile
  value: /opt/faxe/docker_storage/devat.env

pool: devat-faxe-cluster

steps:
- task: CopyFiles@2
  inputs:
    Contents: |
      **/*
      !todo
      !statefulset.yml
      !README.md
      !docker.run
      !Dockerfile_azedge
      !azure-pipelines.yml
      !azure-pipelines-devat.yml
      !azure-pipelines-azure.yml
      !azure-pipelines-helix.yml
      !docker-compose.yaml
      !Dockerfile_debian.intel-nuc
      !Dockerfile.intel-nuc
      !Dockerfile.k8s
      !Dockerfile_faxe
      !Dockerfile.revpi-core-3
      !docker-compose-azure.yml
      !docker-compose-helix.yml
      !.git
      !.github
      !.gitignore
    TargetFolder: '/opt/faxe/faxe_repo'
    CleanTargetFolder: true
    overWrite: true
- script: | 
    cd /opt/faxe/faxe_repo
    # gather azure build information:
    echo '$(Build.Repository.Name).$(Build.BuildNumber)'
    TAG=$(echo '$(Build.Repository.Name):$(Build.BuildNumber)')
    echo "creating env file"
    [ ${#FAXE_ALLOW_ANONYMOUS} == "0" ] || echo "FAXE_ALLOW_ANONYMOUS=$FAXE_ALLOW_ANONYMOUS" > $(environmentFile)
    [ ${#FAXE_AMQP_HEARTBEAT} == "0" ] || echo "FAXE_AMQP_HEARTBEAT=$FAXE_AMQP_HEARTBEAT" >> $(environmentFile)
    [ ${#FAXE_AMQP_HOST} == "0" ] || echo "FAXE_AMQP_HOST=$FAXE_AMQP_HOST" >> $(environmentFile)
    [ $(echo $(FAXE_AMQP_PASS) | wc --chars) == "0" ] || echo "FAXE_AMQP_PASS=$(FAXE_AMQP_PASS)" >> $(environmentFile)
    [ ${#FAXE_AMQP_PORT} == "0" ] || echo "FAXE_AMQP_PORT=$FAXE_AMQP_PORT" >> $(environmentFile)
    [ ${#FAXE_AMQP_SSL_CACERTFILE} == "0" ] || echo "FAXE_AMQP_SSL_CACERTFILE=$FAXE_AMQP_SSL_CACERTFILE" >> $(environmentFile)
    [ ${#FAXE_AMQP_SSL_CERTFILE} == "0" ] || echo "FAXE_AMQP_SSL_CERTFILE=$FAXE_AMQP_SSL_CERTFILE" >> $(environmentFile)
    [ ${#FAXE_AMQP_SSL_ENABLE} == "0" ] || echo "FAXE_AMQP_SSL_ENABLE=$FAXE_AMQP_SSL_ENABLE" >> $(environmentFile)
    [ ${#FAXE_AMQP_SSL_KEYFILE} == "0" ] || echo "FAXE_AMQP_SSL_KEYFILE=$FAXE_AMQP_SSL_KEYFILE" >> $(environmentFile)
    [ ${#FAXE_AMQP_SSL_VERIFY} == "0" ] || echo "FAXE_AMQP_SSL_VERIFY=$FAXE_AMQP_SSL_VERIFY" >> $(environmentFile)
    [ $(echo $(FAXE_AMQP_USER) | wc --chars) == "0" ] || echo "FAXE_AMQP_USER=$(FAXE_AMQP_USER)" >> $(environmentFile)
    [ ${#FAXE_CONN_STATUS_HANDLER_MQTT_BASE_TOPIC} == "0" ] || echo "FAXE_CONN_STATUS_HANDLER_MQTT_BASE_TOPIC=$FAXE_CONN_STATUS_HANDLER_MQTT_BASE_TOPIC" >> $(environmentFile)
    [ ${#FAXE_CONN_STATUS_HANDLER_MQTT_ENABLE} == "0" ] || echo "FAXE_CONN_STATUS_HANDLER_MQTT_ENABLE=$FAXE_CONN_STATUS_HANDLER_MQTT_ENABLE" >> $(environmentFile)
    [ ${#FAXE_CONN_STATUS_HANDLER_MQTT_HOST} == "0" ] || echo "FAXE_CONN_STATUS_HANDLER_MQTT_HOST=$FAXE_CONN_STATUS_HANDLER_MQTT_HOST" >> $(environmentFile)
    [ ${#FAXE_CONN_STATUS_HANDLER_MQTT_PORT} == "0" ] || echo "FAXE_CONN_STATUS_HANDLER_MQTT_PORT=$FAXE_CONN_STATUS_HANDLER_MQTT_PORT" >> $(environmentFile)
    [ ${#FAXE_CRATE_DATABASE} == "0" ] || echo "FAXE_CRATE_DATABASE=$FAXE_CRATE_DATABASE" >> $(environmentFile)
    [ ${#FAXE_CRATE_HOST} == "0" ] || echo "FAXE_CRATE_HOST=$FAXE_CRATE_HOST" >> $(environmentFile)
    [ ${#FAXE_CRATE_HTTP_DATABASE} == "0" ] || echo "FAXE_CRATE_HTTP_DATABASE=$FAXE_CRATE_HTTP_DATABASE" >> $(environmentFile)
    [ ${#FAXE_CRATE_HTTP_HOST} == "0" ] || echo "FAXE_CRATE_HTTP_HOST=$FAXE_CRATE_HTTP_HOST" >> $(environmentFile)
    [ $(echo $(FAXE_CRATE_HTTP_PASS) | wc --chars) == "0" ] || echo "FAXE_CRATE_HTTP_PASS=$(FAXE_CRATE_HTTP_PASS)" >> $(environmentFile)
    [ ${#FAXE_CRATE_HTTP_PORT} == "0" ] || echo "FAXE_CRATE_HTTP_PORT=$FAXE_CRATE_HTTP_PORT" >> $(environmentFile)
    [ $(echo $(FAXE_CRATE_HTTP_USER) | wc --chars) == "0" ] || echo "FAXE_CRATE_HTTP_USER=$(FAXE_CRATE_HTTP_USER)" >> $(environmentFile)
    [ $(echo $(FAXE_CRATE_PASS) | wc --chars) == "0" ] || echo "FAXE_CRATE_PASS=$(FAXE_CRATE_PASS)" >> $(environmentFile)
    [ ${#FAXE_CRATE_PORT} == "0" ] || echo "FAXE_CRATE_PORT=$FAXE_CRATE_PORT" >> $(environmentFile)
    [ $(echo $(FAXE_CRATE_USER) | wc --chars) == "0" ] || echo "FAXE_CRATE_USER=$(FAXE_CRATE_USER)" >> $(environmentFile)
    [ ${#FAXE_DEBUG_HANDLER_MQTT_BASE_TOPIC} == "0" ] || echo "FAXE_DEBUG_HANDLER_MQTT_BASE_TOPIC=$FAXE_DEBUG_HANDLER_MQTT_BASE_TOPIC" >> $(environmentFile)
    [ ${#FAXE_DEBUG_HANDLER_MQTT_ENABLE} == "0" ] || echo "FAXE_DEBUG_HANDLER_MQTT_ENABLE=$FAXE_DEBUG_HANDLER_MQTT_ENABLE" >> $(environmentFile)
    [ ${#FAXE_DEBUG_HANDLER_MQTT_HOST} == "0" ] || echo "FAXE_DEBUG_HANDLER_MQTT_HOST=$FAXE_DEBUG_HANDLER_MQTT_HOST" >> $(environmentFile)
    [ ${#FAXE_DEBUG_HANDLER_MQTT_PORT} == "0" ] || echo "FAXE_DEBUG_HANDLER_MQTT_PORT=$FAXE_DEBUG_HANDLER_MQTT_PORT" >> $(environmentFile)
    [ ${#FAXE_DEBUG_TIME} == "0" ] || echo "FAXE_DEBUG_TIME=$FAXE_DEBUG_TIME" >> $(environmentFile)
    [ $(echo $(FAXE_DEFAULT_PASSWORD) | wc --chars) == "0" ] || echo "FAXE_DEFAULT_PASSWORD=$(FAXE_DEFAULT_PASSWORD)" >> $(environmentFile)
    [ $(echo $(FAXE_DEFAULT_USERNAME) | wc --chars) == "0" ] || echo "FAXE_DEFAULT_USERNAME=$(FAXE_DEFAULT_USERNAME)" >> $(environmentFile)
    [ ${#FAXE_DEQUEUE_INTERVAL} == "0" ] || echo "FAXE_DEQUEUE_INTERVAL=$FAXE_DEQUEUE_INTERVAL" >> $(environmentFile)
    [ ${#FAXE_DFS_SCRIPT_PATH} == "0" ] || echo "FAXE_DFS_SCRIPT_PATH=$FAXE_DFS_SCRIPT_PATH" >> $(environmentFile)
    [ $(echo $(FAXE_DISTRIBUTED_COOKIE) | wc --chars) == "0" ] || echo "FAXE_DISTRIBUTED_COOKIE=$(FAXE_DISTRIBUTED_COOKIE)" >> $(environmentFile)
    [ ${#FAXE_EMAIL_FROM} == "0" ] || echo "FAXE_EMAIL_FROM=$FAXE_EMAIL_FROM" >> $(environmentFile)
    [ $(echo $(FAXE_EMAIL_PASS) | wc --chars) == "0" ] || echo "FAXE_EMAIL_PASS=$(FAXE_EMAIL_PASS)" >> $(environmentFile)
    [ ${#FAXE_EMAIL_PORT} == "0" ] || echo "FAXE_EMAIL_PORT=$FAXE_EMAIL_PORT" >> $(environmentFile)
    [ ${#FAXE_EMAIL_SMTP} == "0" ] || echo "FAXE_EMAIL_SMTP=$FAXE_EMAIL_SMTP" >> $(environmentFile)
    [ ${#FAXE_EMAIL_TEMPLATE} == "0" ] || echo "FAXE_EMAIL_TEMPLATE=$FAXE_EMAIL_TEMPLATE" >> $(environmentFile)
    [ ${#FAXE_EMAIL_TLS} == "0" ] || echo "FAXE_EMAIL_TLS=$FAXE_EMAIL_TLS" >> $(environmentFile)
    [ $(echo $(FAXE_EMAIL_USER) | wc --chars) == "0" ] || echo "FAXE_EMAIL_USER=$(FAXE_EMAIL_USER)" >> $(environmentFile)
    [ ${#FAXE_ERLANG_ASYNC_THREADS} == "0" ] || echo "FAXE_ERLANG_ASYNC_THREADS=$FAXE_ERLANG_ASYNC_THREADS" >> $(environmentFile)
    [ ${#FAXE_ERLANG_MAX_PORTS} == "0" ] || echo "FAXE_ERLANG_MAX_PORTS=$FAXE_ERLANG_MAX_PORTS" >> $(environmentFile)
    [ ${#FAXE_FLOW_AUTO_START} == "0" ] || echo "FAXE_FLOW_AUTO_START=$FAXE_FLOW_AUTO_START" >> $(environmentFile)
    [ ${#FAXE_HTTP_API_CIPHERS} == "0" ] || echo "FAXE_HTTP_API_CIPHERS=$FAXE_HTTP_API_CIPHERS" >> $(environmentFile)
    [ ${#FAXE_HTTP_API_PORT} == "0" ] || echo "FAXE_HTTP_API_PORT=$FAXE_HTTP_API_PORT" >> $(environmentFile)
    [ ${#FAXE_HTTP_API_SSL_CACERTFILE} == "0" ] || echo "FAXE_HTTP_API_SSL_CACERTFILE=$FAXE_HTTP_API_SSL_CACERTFILE" >> $(environmentFile)
    [ ${#FAXE_HTTP_API_SSL_CERTFILE} == "0" ] || echo "FAXE_HTTP_API_SSL_CERTFILE=$FAXE_HTTP_API_SSL_CERTFILE" >> $(environmentFile)
    [ ${#FAXE_HTTP_API_SSL_KEYFILE} == "0" ] || echo "FAXE_HTTP_API_SSL_KEYFILE=$FAXE_HTTP_API_SSL_KEYFILE" >> $(environmentFile)
    [ ${#FAXE_HTTP_API_TLS_ENABLE} == "0" ] || echo "FAXE_HTTP_API_TLS_ENABLE=$FAXE_HTTP_API_TLS_ENABLE" >> $(environmentFile)
    [ ${#FAXE_INFLUX_HTTP_HOST} == "0" ] || echo "FAXE_INFLUX_HTTP_HOST=$FAXE_INFLUX_HTTP_HOST" >> $(environmentFile)
    [ $(echo $(FAXE_INFLUX_HTTP_PASS) | wc --chars) == "0" ] || echo "FAXE_INFLUX_HTTP_PASS=$(FAXE_INFLUX_HTTP_PASS)" >> $(environmentFile)
    [ ${#FAXE_INFLUX_HTTP_PORT} == "0" ] || echo "FAXE_INFLUX_HTTP_PORT=$FAXE_INFLUX_HTTP_PORT" >> $(environmentFile)
    [ $(echo $(FAXE_INFLUX_HTTP_USER) | wc --chars) == "0" ] || echo "FAXE_INFLUX_HTTP_USER=$(FAXE_INFLUX_HTTP_USER)" >> $(environmentFile)
    [ ${#FAXE_LOG_CONSOLE_LEVEL} == "0" ] || echo "FAXE_LOG_CONSOLE_LEVEL=$FAXE_LOG_CONSOLE_LEVEL" >> $(environmentFile)
    [ ${#FAXE_LOG_EMIT_LEVEL} == "0" ] || echo "FAXE_LOG_EMIT_LEVEL=$FAXE_LOG_EMIT_LEVEL" >> $(environmentFile)
    [ ${#FAXE_METRICS_HANDLER_MQTT_BASE_TOPIC} == "0" ] || echo "FAXE_METRICS_HANDLER_MQTT_BASE_TOPIC=$FAXE_METRICS_HANDLER_MQTT_BASE_TOPIC" >> $(environmentFile)
    [ ${#FAXE_METRICS_HANDLER_MQTT_ENABLE} == "0" ] || echo "FAXE_METRICS_HANDLER_MQTT_ENABLE=$FAXE_METRICS_HANDLER_MQTT_ENABLE" >> $(environmentFile)
    [ ${#FAXE_METRICS_HANDLER_MQTT_HOST} == "0" ] || echo "FAXE_METRICS_HANDLER_MQTT_HOST=$FAXE_METRICS_HANDLER_MQTT_HOST" >> $(environmentFile)
    [ ${#FAXE_METRICS_HANDLER_MQTT_PORT} == "0" ] || echo "FAXE_METRICS_HANDLER_MQTT_PORT=$FAXE_METRICS_HANDLER_MQTT_PORT" >> $(environmentFile)
    [ ${#FAXE_MNESIA_DIR} == "0" ] || echo "FAXE_MNESIA_DIR=$FAXE_MNESIA_DIR" >> $(environmentFile)
    [ ${#FAXE_MQTT_HOST} == "0" ] || echo "FAXE_MQTT_HOST=$FAXE_MQTT_HOST" >> $(environmentFile)
    [ $(echo $(FAXE_MQTT_PASS) | wc --chars) == "0" ] || echo "FAXE_MQTT_PASS=$(FAXE_MQTT_PASS)" >> $(environmentFile)
    [ ${#FAXE_MQTT_PORT} == "0" ] || echo "FAXE_MQTT_PORT=$FAXE_MQTT_PORT" >> $(environmentFile)
    [ ${#FAXE_MQTT_SSL_CACERTFILE} == "0" ] || echo "FAXE_MQTT_SSL_CACERTFILE=$FAXE_MQTT_SSL_CACERTFILE" >> $(environmentFile)
    [ ${#FAXE_MQTT_SSL_CERTFILE} == "0" ] || echo "FAXE_MQTT_SSL_CERTFILE=$FAXE_MQTT_SSL_CERTFILE" >> $(environmentFile)
    [ ${#FAXE_MQTT_SSL_ENABLE} == "0" ] || echo "FAXE_MQTT_SSL_ENABLE=$FAXE_MQTT_SSL_ENABLE" >> $(environmentFile)
    [ ${#FAXE_MQTT_SSL_KEYFILE} == "0" ] || echo "FAXE_MQTT_SSL_KEYFILE=$FAXE_MQTT_SSL_KEYFILE" >> $(environmentFile)
    [ $(echo $(FAXE_MQTT_USER) | wc --chars) == "0" ] || echo "FAXE_MQTT_USER=$(FAXE_MQTT_USER)" >> $(environmentFile)
    [ ${#FAXE_NODENAME} == "0" ] || echo "FAXE_NODENAME=$FAXE_NODENAME" >> $(environmentFile)
    [ ${#FAXE_PYTHON_SCRIPT_PATH} == "0" ] || echo "FAXE_PYTHON_SCRIPT_PATH=$FAXE_PYTHON_SCRIPT_PATH" >> $(environmentFile)
    [ ${#FAXE_PYTHON_VERSION} == "0" ] || echo "FAXE_PYTHON_VERSION=$FAXE_PYTHON_VERSION" >> $(environmentFile)
    [ ${#FAXE_QUEUE_BASE_DIR} == "0" ] || echo "FAXE_QUEUE_BASE_DIR=$FAXE_QUEUE_BASE_DIR" >> $(environmentFile)
    [ ${#FAXE_QUEUE_CAPACITY} == "0" ] || echo "FAXE_QUEUE_CAPACITY=$FAXE_QUEUE_CAPACITY" >> $(environmentFile)
    [ ${#FAXE_QUEUE_TTF} == "0" ] || echo "FAXE_QUEUE_TTF=$FAXE_QUEUE_TTF" >> $(environmentFile)
    [ ${#FAXE_QUEUE_TTL} == "0" ] || echo "FAXE_QUEUE_TTL=$FAXE_QUEUE_TTL" >> $(environmentFile)
    [ ${#FAXE_QUEUE_TTS} == "0" ] || echo "FAXE_QUEUE_TTS=$FAXE_QUEUE_TTS" >> $(environmentFile)
    [ ${#FAXE_RABBITMQ_ROOT_EXCHANGE} == "0" ] || echo "FAXE_RABBITMQ_ROOT_EXCHANGE=$FAXE_RABBITMQ_ROOT_EXCHANGE" >> $(environmentFile)
    [ ${#FAXE_S7POOL_MAX_SIZE} == "0" ] || echo "FAXE_S7POOL_MAX_SIZE=$FAXE_S7POOL_MAX_SIZE" >> $(environmentFile)
    [ ${#FAXE_S7POOL_MIN_SIZE} == "0" ] || echo "FAXE_S7POOL_MIN_SIZE=$FAXE_S7POOL_MIN_SIZE" >> $(environmentFile)   
    #check for empty lines in env file
    while read line; do
      if [ $(echo $line | cut -d "=" -f2 |wc --char) -gt 1 ]
        then 
          echo "key/value ok"
        else 
          echo "key without value: $line => remove it"
          sed "s!$line!!" -i $(environmentFile) ;
      fi
    done < $(environmentFile)
    # remove empty lines in env file
    sed -i '/^[[:blank:]]*$/d' $(environmentFile)
    # sort env file
    sort $(environmentFile) -o $(environmentFile)
  displayName: 'configure env file'
- task: AzureKeyVault@1
  inputs:
    ConnectedServiceName: 'AzEA - ConnectedDataHub-OpenShift(aa13b7d2-851a-4531-aac8-35d4453b07aa)'
    KeyVaultName: 'CWAKeyvault'
    SecretsFilter: '*'
    RunAsPreJob: true
- script: | 
    echo keyvault1: $FAXE-CRATE-HTTP-USER-KeyVault-TEST
    displayName: 'test with azurekeyvault'
- script: | 
    #build container-image
    sudo -u $(FAXE_RUNTIME_USER) docker build -t $(Build.Repository.Name):$(Build.BuildNumber) -f Dockerfile_debian .
   
    # manipulate docker-compose file:
    # inject current build number into compose-file
    sed "s!Dockerfile_debian!$TAG!g" -i docker-compose-devat.yml
    # change port binding dynamically to host, used for loadbalancing to prevent duplicate port binding (haproxy and keepalived are used for incoming traffic)
    sed "sL8080:8080L$(hostname -i):8080:8080Lg" -i docker-compose-devat.yml
    # inject env file into docker-compose file:
    sed "sL/opt/faxe/docker_storage/devat.envL$(environmentFile)L" -i  docker-compose-devat.yml
  displayName: 'build new image and tag it with azure pipeline build number'
- script: |     
    # stop old version
    cd /opt/faxe/faxe_repo
    sudo -u $(FAXE_RUNTIME_USER) /usr/local/bin/docker-compose -f docker-compose-devat.yml down
    # kill/remove old data
    if [[ $(sudo -u $(FAXE_RUNTIME_USER) docker ps -a | grep faxe ) ]]; 
      then
        sudo -u $(FAXE_RUNTIME_USER) docker kill faxe; 
        sudo -u $(FAXE_RUNTIME_USER) docker container rm faxe;
        #sudo -u $(FAXE_RUNTIME_USER) docker rmi faxe_repo_faxe;
        echo "running faxe found - kill+remove it"
      else
        echo "no running faxe found - skip"
    fi
  displayName: 'stop old container via docker-compose'    
- script: |     
    cd /opt/faxe/faxe_repo
    sudo -u $(FAXE_RUNTIME_USER) /usr/local/bin/docker-compose -f docker-compose-devat.yml up -d
  displayName: 'start container via docker-compose'
- script: |
    service=$(Build.Repository.Name)
    #check if we start householding
    HOUSEKEEPING=false
    IMAGE_KEEP=5
    DIFF=$(docker images | grep $service | wc -l)
     if [[ "$DIFF" -lt 0 ]] ;
        then
          echo "skipping housekeeping - no local images found"
          HOUSEKEEPING=false
     fi
     if  [[ "$DIFF" -gt $IMAGE_KEEP ]];
        then
          echo "too many images for $service present - starting housekeeping"
          HOUSEKEEPING=true
        else
          echo "skipping housekeeping - limit not reached"
          HOUSEKEEPING=false
          echo $(( $(echo $(docker images | grep $service | wc -l)) - $IMAGE_KEEP )) images left, before housekeeping deletes old images
     fi
    # clear arrays:
    unset arr_all  arr_keep
    if [ $HOUSEKEEPING = "true" ];
      then
      	echo "starting housekeeping"
        #arr_all=$(docker images | grep $service | sort -k2 -r | awk '{print $3}')
        arr_all=$(docker images | grep $service |  awk '{print $3}')
        #echo all ${arr_all[*]}
        arr_keep=$(docker images | grep $service  | awk '{print $3}' | head -n $IMAGE_KEEP)
        #arr_keep=$(docker images | grep $service | sort -k2 -r | awk '{print $3}' | head -n $IMAGE_KEEP)
        #echo keep ${arr_keep[*]}
    	  for del in ${arr_keep[@]}
    	  do
    	    arr_all=("${arr_all[@]/$del}") 
    	  done   
    fi  
    echo delete images: ${arr_all[*]}
    echo keep images: ${arr_keep[*]}
    # delete old images:
    for del_image in ${arr_all[*]} ;
    do
      echo "sudo -u faxe /usr/bin/docker rmi $del_image"
    done
  displayName: 'housekeeping - keep only latest 5 images'    
  