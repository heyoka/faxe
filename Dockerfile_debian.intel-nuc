### Build stage 0
FROM balenalib/intel-nuc-debian-python:latest as erlang

### erlang and rebar3
ENV OTP_VERSION="23.2.6" \
    REBAR3_VERSION="3.13.1"

LABEL org.opencontainers.image.version=$OTP_VERSION

RUN set -xe \
	&& OTP_DOWNLOAD_URL="https://github.com/erlang/otp/archive/OTP-${OTP_VERSION}.tar.gz" \
	&& OTP_DOWNLOAD_SHA256="5bc6b31b36b949bf06e84d51986311fc1d2ace5e717aae3186dc057d4838445d" \
	&& fetchDeps=' \
		curl \
		ca-certificates' \
	&& apt-get update \
	&& apt-get install -y --no-install-recommends $fetchDeps \
	&& curl -fSL -o otp-src.tar.gz "$OTP_DOWNLOAD_URL" \
	&& echo "$OTP_DOWNLOAD_SHA256  otp-src.tar.gz" | sha256sum -c - \
	&& runtimeDeps=' \
		libodbc1 \
		libssl1.1 \
		libsctp1 \
	' \
	&& buildDeps=' \
		autoconf \
		dpkg-dev \
		gcc \
		g++ \
		make \
		libncurses-dev \
		unixodbc-dev \
		libssl-dev \
		libsctp-dev \
	' \
	&& apt-get install -y --no-install-recommends $runtimeDeps \
	&& apt-get install -y --no-install-recommends $buildDeps \
	&& export ERL_TOP="/usr/src/otp_src_${OTP_VERSION%%@*}" \
	&& mkdir -vp $ERL_TOP \
	&& tar -xzf otp-src.tar.gz -C $ERL_TOP --strip-components=1 \
	&& rm otp-src.tar.gz \
	&& ( cd $ERL_TOP \
	  && ./otp_build autoconf \
	  && gnuArch="$(dpkg-architecture --query DEB_HOST_GNU_TYPE)" \
	  && ./configure --build="$gnuArch" \
	  && make -j$(nproc) \
	  && make install ) \
	## REBAR3
	&& REBAR3_DOWNLOAD_URL="https://github.com/erlang/rebar3/archive/${REBAR3_VERSION}.tar.gz" \
	&& REBAR3_DOWNLOAD_SHA256="706cc0770062bde2674abc01964c68553398fe4d8023605b305cfe326b92520f" \
	&& mkdir -p /usr/src/rebar3-src \
	&& curl -fSL -o rebar3-src.tar.gz "$REBAR3_DOWNLOAD_URL" \
	&& echo "$REBAR3_DOWNLOAD_SHA256 rebar3-src.tar.gz" | sha256sum -c - \
	&& tar -xzf rebar3-src.tar.gz -C /usr/src/rebar3-src --strip-components=1 \
	&& rm rebar3-src.tar.gz \
	&& cd /usr/src/rebar3-src \
	&& HOME=$PWD ./bootstrap \
	&& install -v ./rebar3 /usr/local/bin/ \
	&& rm -rf /usr/src/rebar3-src \
	&& find /usr/local -name examples | xargs rm -rf \
    && apt-get purge -y --auto-remove $buildDeps $fetchDeps \
    && rm -rf $ERL_TOP /var/lib/apt/lists/*

CMD ["erl"]

### python requirements
COPY python_requirements.txt ./
RUN apt-get update && apt-get install -y --no-install-recommends gcc g++ make \
    && pip install --no-cache-dir -r python_requirements.txt \
    && apt-get purge -y --auto-remove gcc g++ make \
    && rm -rf /var/lib/apt/lists/*


### Build stage 1
ARG VERSION=latest
FROM erlang AS debian

# Set working directory
RUN mkdir -p /buildroot/rebar3/bin
WORKDIR /buildroot

# Copy faxe application
COPY ./ faxe

WORKDIR faxe

# define all packeges that should be updated
ARG update_list="libbsd* libzstd* libcurl3-gnutls libldap-common libopenjp2-7 python3.7  libtiff5 linux-libc-dev subversion libpq5 libldap-2.4-2 liblz4-1 libsvn1"
ARG remove_list=""

ENV FAXE_EXTENSIONS="ext.config"

# install git, build release and cleanup deps
RUN apt-get update && apt-get install -y --no-install-recommends gcc g++ make git-all \
	&& apt --only-upgrade --no-install-recommends install ${update_list} -y  \
    #&& apt remove  --auto-remove ${remove_list} -y  \
    && rebar3 as balena release \
    && apt-get purge -y --auto-remove gcc g++ make git-all \
    && rm -rf /var/lib/apt/lists/*


### Build stage 2
FROM debian

# Install the released application
COPY --from=debian /buildroot/faxe/_build/balena/rel/faxe /faxe
# cleanup
RUN rm -rf /buildroot

# Expose relevant ports
## http api
EXPOSE 80

ENTRYPOINT ["/faxe/bin/faxe"]
CMD ["foreground"]